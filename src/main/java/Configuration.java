import java.io.Serializable;
import java.security.SecureRandom;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

public class Configuration implements Serializable {
    // Total processes
    public final int n;
    // Total byzantine processes
    public final int t;
    // Max differences between processes
    public final double e;
    // Mean and standardDeviation of initial values (generated by normal distribution)
    public final double mean, standardDeviation;
    // Mutated Gossip Dispatcher config
    public final Integer fanout, delay, delayGroupSize;
    public final TimeUnit delayTimeUnit;
    // Random generator
    protected transient final SecureRandom random;
    // Client.Client debug mode - If true each client will create a file with logs
    public final boolean clientDebug, isGossipDispatcher;

    private Configuration(int n,
                          int t,
                          double e,
                          double mean,
                          double standardDeviation,
                          Integer fanout,
                          Integer delay,
                          Integer delayGroupSize,
                          TimeUnit delayTimeUnit,
                          boolean clientDebug,
                          boolean isGossipDispatcher) {
        this.n = n;
        this.t = t;
        this.e = e;
        this.mean = mean;
        this.standardDeviation = standardDeviation;
        this.fanout = fanout;
        this.delay = delay;
        this.delayTimeUnit = delayTimeUnit;
        this.delayGroupSize = delayGroupSize;
        this.clientDebug = clientDebug;
        this.isGossipDispatcher = isGossipDispatcher;
        this.random = new SecureRandom();
    }

    public double getRandomValue() {
        //used to generate byzantine values
        return Math.abs(random.nextInt((int) Math.floor(mean + standardDeviation)) + 1.);
    }

    public double getInitialValue() {
        //used to generate initial values
        return random.nextGaussian() * standardDeviation + mean;
    }

    public int nextInt(int bound) {
        return random.nextInt(bound);
    }

    public String toString() {
        return "n=" + n +
                ", t=" + t +
                ", e=" + e +
                ", st=" + standardDeviation +
                ", fanout = " + fanout +
                ", delay = " + delay +
                ", delayGroupSize = " + delayGroupSize;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Configuration that = (Configuration) o;
        return n == that.n &&
                t == that.t &&
                Double.compare(that.e, e) == 0 &&
                Double.compare(that.mean, mean) == 0 &&
                Double.compare(that.standardDeviation, standardDeviation) == 0 &&
                Double.compare(that.delay, delay) == 0 &&
                Double.compare(that.fanout, fanout) == 0 &&
                that.delayGroupSize.equals(delayGroupSize);
    }

    @Override
    public int hashCode() {
        return Objects.hash(n, t, e, mean, standardDeviation, fanout, delay, delayGroupSize);
    }

    public static class Builder {
        private int n;
        private double e, mean, standardDeviation;
        private boolean clientDebug, isGossipDispatcher;
        private Integer t, delay, fanout, delayGroupSize;
        private TimeUnit delayTimeUnit;

        public Builder setEpsilon(double e) {
            this.e = e;
            return this;
        }

        public Builder setMean(double mean) {
            this.mean = mean;
            return this;
        }

        public Builder setProcessesNumber(int n) {
            this.n = n;
            return this;
        }

        public Builder setStandardDeviation(double standardDeviation) {
            this.standardDeviation = standardDeviation;
            return this;
        }

        public Builder setFaultyProcessesNumber(Integer t) {
            this.t = t;
            return this;
        }

        public Builder setFanout(Integer fanout) {
            this.fanout = fanout;
            return this;
        }

        public Builder setDelay(Integer delay, TimeUnit timeUnit) {
            this.delay = delay;
            this.delayTimeUnit = timeUnit;
            return this;
        }

        public Builder setDelayGroupSize(Integer delayGroupSize) {
            this.delayGroupSize = delayGroupSize;
            return this;
        }

        public Builder setClientDebugMode(boolean clientDebug) {
            this.clientDebug = clientDebug;
            return this;
        }

        public Builder setIsGossipDispatcher(boolean isGossipDispatcher) {
            if( t == null || t < 0) t = (n-1)/5;

            this.isGossipDispatcher = isGossipDispatcher;
            return this;
        }

        public Configuration build(){
            checkDataIntegrity();
            return new Configuration(n,t,e,mean,standardDeviation,fanout, delay, delayGroupSize, delayTimeUnit, clientDebug, isGossipDispatcher);
        }

        private void checkDataIntegrity(){
            if( n < 5*t +1)
                throw new IllegalArgumentException("n must be equal to or greater than 5t+1");
            if(isGossipDispatcher){
                if( delayGroupSize == null || delayGroupSize < 0 )
                    throw new IllegalArgumentException("DelayGroupSize must be defined as a non negative number");
                if( fanout == null || fanout > n || fanout < 0)
                    throw new IllegalArgumentException("Fanout must be defined as a non negative number less than n");
                if( delay == null || delay < 0)
                    throw new IllegalArgumentException("Delay must be defined as a non negative number");
            }
        }
    }
}
